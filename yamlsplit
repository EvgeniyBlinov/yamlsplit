#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: ai ts=4 sts=4 et sw=4 ft=python


import yaml
import json
import sys
import os
import re


_empty = object()


class Filter(object):


    def camelcase2abbr(self, s):
        return (''.join([c for c in s if c.isupper()])).lower()


    def extract(self, s):
        return s


def deep_get(dct, dotted_path, default=_empty):
    for key in dotted_path.split('.'):
        try:
            dct = dct[key]
        except KeyError:
            if default is _empty:
                    raise
            return default
    return dct


def get_name(content, patterns, name=''):
    filter = Filter()
    for spec_id, callback in patterns.items():
        val = deep_get(content, spec_id)
        if val:
            filter_func = getattr(filter, callback, None)
            if callable(filter_func):
                name += filter_func(val)
                name += '-'

    return name.strip('-')


actions_default = '{"kind": "camelcase2abbr", "metadata.name": "extract"}'

APP_FILE_PREFIX = os.environ.get('APP_FILE_PREFIX', 'k8s-')
APP_OUT = os.environ.get('APP_OUT', './out')
APP_ACTIONS = os.environ.get('APP_ACTIONS', actions_default)

actions = json.loads(APP_ACTIONS)
# out_dir = os.path.abspath(os.path.curdir)
out_dir = os.path.abspath(APP_OUT)

if not os.path.exists(out_dir):
    os.makedirs(out_dir)

content = re.split(r"---\n", sys.stdin.read().strip())
for f in content:
    fc = yaml.safe_load(f)
    name = get_name(fc, actions, APP_FILE_PREFIX)
    name += '.yaml'

    with open(os.path.join(out_dir, name), "w+") as text_file:
        text_file.write(f)
